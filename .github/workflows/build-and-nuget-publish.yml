name: build-and-nuget-publish

on:  
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "*" ]

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  OutputDirectory: ${{github.workspace}}/buildoutput
  NuGetProject: DataMeshGroup.Fusion/DataMeshGroup.Fusion.csproj
  NuGetProject2: DataMeshGroup.Fusion.Model/DataMeshGroup.Fusion.Model.csproj
  

defaults:
  run:
    shell: pwsh
    

jobs:  
  build:    
    runs-on: windows-latest  

    steps:      
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Get all history to allow automatic versioning using MinVer
     
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2

      - name: Restore dependencies
        run: msbuild.exe  ${{ env.NuGetProject }} /t:Restore /p:configuration="Release" /p:OutputPath=${{ env.OutputDirectory }}

      - name: Build
        run: msbuild.exe ${{ env.NuGetProject }} /t:Build /p:configuration="Release" /p:OutputPath=${{ env.OutputDirectory }}
        
      - name: Create Nuget package
        run: msbuild.exe ${{ env.NuGetProject }} /t:Pack /p:configuration="Release" /p:OutputPath=${{ env.OutputDirectory }}

      - name: Restore dependencies
        run: msbuild.exe  ${{ env.NuGetProject2 }} /t:Restore /p:configuration="Release" /p:OutputPath=${{ env.OutputDirectory }}

      - name: Build
        run: msbuild.exe ${{ env.NuGetProject2 }} /t:Build /p:configuration="Release" /p:OutputPath=${{ env.OutputDirectory }}
        
      - name: Create Nuget package
        run: msbuild.exe ${{ env.NuGetProject2 }} /t:Pack /p:configuration="Release" /p:OutputPath=${{ env.OutputDirectory }}

        
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: nuget
          path: ${{ env.OutputDirectory }}/*.nupkg
          
         
  publish:              
    runs-on: ubuntu-latest
    needs: [ build ]
    
    steps:
      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v3
        with:
          name: nuget
          path: ${{ env.OutputDirectory }}
          
      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3          
  
      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Publish NuGet package
        shell: pwsh      
        run: |
          foreach($file in (Get-ChildItem "${{ env.OutputDirectory }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.PUBLISH_NUGET_SECRET }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }       
